-----TABLES-----

CREATE TABLE TEAM
(
    TEAM_ID NUMBER(3) PRIMARY KEY,
    DESCRIPTION VARCHAR2(50)
    
);

CREATE TABLE LOCATION
(
    LOCATION_ID NUMBER(3) PRIMARY KEY,
    LOCATION_NAME VARCHAR(100),
    CITY VARCHAR2(50),
    COUNTRY VARCHAR2(50)

);

CREATE TABLE JOB
(
    JOB_ID NUMBER(3) PRIMARY KEY,
    LOCATION_ID NUMBER(3) REFERENCES LOCATION(LOCATION_ID),
    TEAM_ID NUMBER(3) REFERENCES TEAM(TEAM_ID),
    TITLE VARCHAR2(100),
    CREATED DATE

);


-----SEQUENCES-----

CREATE SEQUENCE SEQ_TEAM_ID;
CREATE SEQUENCE SEQ_LOCATION_ID;
CREATE SEQUENCE SEQ_JOB_ID;

-----TRIGGERS-----

CREATE OR REPLACE TRIGGER SET_TEAM_ID
BEFORE INSERT 
ON TEAM
FOR EACH ROW
BEGIN
    :NEW.TEAM_ID := SEQ_TEAM_ID.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER SET_LOCATION_ID
BEFORE INSERT 
ON LOCATION
FOR EACH ROW
BEGIN
    :NEW.LOCATION_ID := SEQ_LOCATION_ID.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER SET_JOB_ID
BEFORE INSERT 
ON JOB
FOR EACH ROW
BEGIN
    :NEW.JOB_ID := SEQ_JOB_ID.NEXTVAL;
END;


CREATE OR REPLACE TRIGGER SET_DATE
BEFORE INSERT OR UPDATE OF TITLE
ON JOB 
FOR EACH ROW
BEGIN
    :NEW.CREATED := SYSDATE()+1;
END;

-----PACKAGE-----

CREATE OR REPLACE PACKAGE PACK AS
PROCEDURE INSERT_FROM_TEMP;
FUNCTION COUNT_JOB_OFFERS ( 
    U_CITY LOCATION.CITY%TYPE,
    U_TEAM_NAME TEAM.DESCRIPTION%TYPE  
)   RETURN NUMBER;
FUNCTION MAX_AMOUNT_OF_JOB_OFFERS
    RETURN VARCHAR2;
END;
/
CREATE OR REPLACE PACKAGE BODY PACK AS
PROCEDURE INSERT_FROM_TEMP IS
BEGIN
    MERGE INTO TEAM tea
    USING ( SELECT DISTINCT TEAM 
            FROM TEMP1
            ORDER BY 1 ) t
    ON (tea.DESCRIPTION = t.TEAM)
    WHEN NOT MATCHED THEN
        INSERT(DESCRIPTION) VALUES (t.TEAM);
    
    MERGE INTO LOCATION loc
    USING ( SELECT DISTINCT LOCATION,
                            SUBSTR(LOCATION, 1, INSTR(LOCATION, ',')-1) AS CITY,
                            SUBSTR(LOCATION, INSTR(LOCATION, ',')+2) AS COUNTRY
            FROM TEMP1 
            ORDER BY 1 ) l
    ON (loc.CITY = l.CITY AND loc.COUNTRY = l.COUNTRY)
    WHEN NOT MATCHED THEN
    INSERT(LOCATION_NAME, CITY, COUNTRY) VALUES (l.LOCATION, l.CITY, l.COUNTRY);
    
    MERGE INTO JOB jo 
    USING ( SELECT l.LOCATION_ID,
                   t.TEAM_ID,
                   temp.JOB_TITLE
            FROM TEMP1 temp JOIN LOCATION l ON temp.LOCATION = l.LOCATION_NAME
                            JOIN TEAM t ON temp.TEAM = t.DESCRIPTION 
            ORDER BY 1, 2, 3) j     
    ON (jo.LOCATION_ID = j.LOCATION_ID AND jo.TEAM_ID = j.TEAM_ID)
    WHEN NOT MATCHED THEN
    INSERT(LOCATION_ID, TEAM_ID, TITLE) 
    VALUES (j.LOCATION_ID, j.TEAM_ID, j.JOB_TITLE);  
END INSERT_FROM_TEMP;

FUNCTION COUNT_JOB_OFFERS
( U_CITY LOCATION.CITY%TYPE,
  U_TEAM_NAME TEAM.DESCRIPTION%TYPE
) RETURN NUMBER IS AMOUNT NUMBER;

BEGIN
    SELECT COUNT(j.JOB_ID)
    INTO AMOUNT
    FROM JOB j JOIN LOCATION l ON j.LOCATION_ID = l.LOCATION_ID 
               JOIN TEAM t ON j.TEAM_ID = t.TEAM_ID
    WHERE U_CITY = l.CITY AND
          U_TEAM_NAME = t.DESCRIPTION;
    RETURN AMOUNT;
END COUNT_JOB_OFFERS;

FUNCTION MAX_AMOUNT_OF_JOB_OFFERS
RETURN VARCHAR2 IS CITY VARCHAR2(32767);

BEGIN
    SELECT l.CITY
    INTO CITY
    FROM LOCATION l, JOB j 
    WHERE j.LOCATION_ID = l.LOCATION_ID
    GROUP BY l.CITY
    HAVING COUNT(j.LOCATION_ID) = ( SELECT MAX(COUNT(j.LOCATION_ID))
                                    FROM LOCATION l, JOB j 
                                    WHERE j.LOCATION_ID = l.LOCATION_ID
                                    GROUP BY l.CITY );
    RETURN CITY;
END MAX_AMOUNT_OF_JOB_OFFERS;

END PACK;

EXECUTE PACK.INSERT_FROM_TEMP;

----------

SELECT PACK.COUNT_JOB_OFFERS('Amstedram', 'Finance') RESULT
FROM DUAL;

SELECT PACK.MAX_AMOUNT_OF_JOB_OFFERS RESULT
FROM DUAL;

UPDATE JOB
SET TITLE = 'Client Manager'
WHERE JOB_ID = 1;


SELECT * FROM LOCATION ORDER BY CITY;
SELECT * FROM TEAM ORDER BY DESCRIPTION;
SELECT * FROM JOB ORDER BY TITLE;
